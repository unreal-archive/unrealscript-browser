import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.StandardOpenOption

plugins {
	id 'java'
	id 'application'
	id 'antlr'
}

group = 'net.shrimpworks'
version = "0.2"

mainClassName = 'net.shrimpworks.unreal.scriptbrowser.App'

repositories {
	mavenCentral()
}

dependencies {
	antlr 'org.antlr:antlr4:4.13.0'

	implementation 'org.freemarker:freemarker:2.3.32'

	testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
}

jar {
	manifest {
		attributes(
				'Implementation-Title': project.name,
				'Implementation-Version': project.version,
				'Main-Class': mainClassName,
		)
	}
}

task execJar(type: Jar) {
	// exclude jar signatures - else it invalidates our fat jar
	exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	archiveClassifier = "exec"
	archiveFileName = "${archiveBaseName.get()}-${archiveClassifier.get()}.${archiveExtension.get()}"
	from sourceSets.main.output

	dependsOn configurations.runtimeClasspath

	manifest {
		attributes(
				'Implementation-Title': project.name,
				'Implementation-Version': project.version,
				'Main-Class': mainClassName,
				'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' ')
		)
	}

	// build the fat executable jar file
	from {
		configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
	}
}

/**
 * Create list of static files, used for later extraction from the jar to disk.
 */
processResources.doLast {
	def wwwStaticDir = projectDir.toPath().resolve('src/main/resources/net/shrimpworks/unreal/scriptbrowser/www/static')
	def destFile = buildDir.toPath().resolve('resources/main/net/shrimpworks/unreal/scriptbrowser/www/static.list')
	def staticList = new StringBuilder()
	files { fileTree(wwwStaticDir).matching { exclude('**/*.xcf') } }.each {
		staticList.append(wwwStaticDir.getParent().relativize(it.toPath())).append("\t").append(it.lastModified()).append("\n")
	}
	Files.write(destFile, staticList.toString().replaceAll("\\\\", "/").getBytes(StandardCharsets.UTF_8),
			StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)
}

test {
	// Use JUnit Jupiter test framework
	useJUnitPlatform()
}
